{"version":3,"file":"static/js/610.5201b519.chunk.js","mappings":"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","sources":["components/panel/index.jsx","Pages/PanelTest/index.jsx","components/window/hooks/useWindowPosition.jsx","components/window/index.jsx","components/window/wrapper/DndKit.jsx","components/window/wrapper/index.jsx"],"sourcesContent":["import React, { useEffect, useState, createContext, useContext } from 'react';\r\nimport { WindowWrapper } from '../window/wrapper';\r\n\r\nconst PanelContext = createContext();\r\n\r\nexport const usePanelContext = () => {\r\n  const context = useContext(PanelContext);\r\n  if (!context) {\r\n    throw new Error('usePanelContext must be used within a PanelProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const PanelProvider = ({ children }) => {\r\n  const [pyodide, setPyodide] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loadingStatus, setLoadingStatus] = useState('Loading...');\r\n\r\n  const [dots, setDots] = useState('');\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setDots(d => d.length >= 3 ? '' : d + '.');\r\n    }, 500);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const loadPyodide = async () => {\r\n      try {\r\n        // Check for WebAssembly support\r\n        if (typeof WebAssembly === 'undefined') {\r\n          const errMsg = 'WebAssembly is not supported in this browser.\\n' +\r\n                        'Please use a modern browser that supports WebAssembly.';\r\n          setError(errMsg);\r\n          throw new Error(errMsg);\r\n        }\r\n\r\n        // Check for SharedArrayBuffer support (needed by Pyodide)\r\n        if (typeof SharedArrayBuffer === 'undefined') {\r\n          const errMsg = 'SharedArrayBuffer is not supported in this browser.\\n' +\r\n                        'This could be due to:\\n' +\r\n                        '1. Browser security settings\\n' +\r\n                        '2. Missing COOP/COEP headers\\n' +\r\n                        '3. Using an unsupported browser\\n\\n' +\r\n                        'Try using a different browser or enabling cross-origin isolation.';\r\n          setError(errMsg);\r\n          throw new Error(errMsg);\r\n        }\r\n\r\n        if (!window.loadPyodide) {\r\n          const errMsg = 'Pyodide script not found. This could be due to:\\n' +\r\n                        '1. Network connectivity issues\\n' + \r\n                        '2. CDN being temporarily unavailable\\n' +\r\n                        '3. Content blocker preventing script load\\n\\n' +\r\n                        'Try refreshing the page or checking your internet connection.\\n\\n' +\r\n                        'Console logs may provide additional details.';\r\n          setError(errMsg);\r\n          throw new Error(errMsg);\r\n        }\r\n\r\n        // Log browser capabilities\r\n        console.log('Browser capabilities:', {\r\n          webAssembly: typeof WebAssembly !== 'undefined',\r\n          sharedArrayBuffer: typeof SharedArrayBuffer !== 'undefined',\r\n          crossOriginIsolated: window.crossOriginIsolated,\r\n          pyodideAvailable: typeof window.loadPyodide !== 'undefined'\r\n        });\r\n\r\n        // Load Pyodide with detailed status\r\n        setLoadingStatus('Checking environment...');\r\n        console.log('Starting Pyodide initialization...');\r\n        \r\n        // Add timeout to detect stalled loading\r\n        const timeout = setTimeout(() => {\r\n          setError('Pyodide initialization timed out after 30 seconds. This may indicate:\\n' +\r\n                   '1. Slow internet connection\\n' +\r\n                   '2. Browser memory constraints\\n' +\r\n                   '3. CPU/resource limitations\\n\\n' +\r\n                   'Try refreshing the page or closing other browser tabs.');\r\n        }, 30000);\r\n        // Configure Pyodide with explicit indexURL and logging\r\n        const pyodideInstance = await window.loadPyodide({\r\n          indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.27.2/full/\",\r\n          stdout: (msg) => {\r\n            console.log(\"Pyodide stdout:\", msg);\r\n            setLoadingStatus(prev => prev + \"\\n\" + msg);\r\n          },\r\n          stderr: (msg) => {\r\n            console.error(\"Pyodide stderr:\", msg);\r\n            setError(prev => prev ? `${prev}\\n${msg}` : msg);\r\n          }\r\n        });\r\n\r\n        // Test basic Python functionality before loading packages\r\n        try {\r\n          console.log(\"Testing Python execution...\");\r\n          setLoadingStatus('Testing Python execution...');\r\n          const version = pyodideInstance.runPython('import sys; sys.version');\r\n          console.log(\"Python version:\", version);\r\n          setLoadingStatus(prev => `${prev}\\nPython version: ${version}`);\r\n        } catch (e) {\r\n          console.error(\"Failed basic Python test:\", e);\r\n          setError(prev => `${prev}\\nFailed basic Python test: ${e.message}`);\r\n          throw e;\r\n        }\r\n        \r\n        // Only proceed with package loading if basic Python works\r\n        setLoadingStatus('Loading packages...');\r\n        try {\r\n          console.log(\"Loading numpy package...\");\r\n          setLoadingStatus('Loading numpy package...');\r\n          \r\n          // Load numpy with more detailed progress\r\n          await pyodideInstance.loadPackage('numpy', {\r\n            messageCallback: (msg) => {\r\n              console.log(\"Loading numpy:\", msg);\r\n              setLoadingStatus(prev => `${prev}\\nNumpy: ${msg}`);\r\n            },\r\n            checkIntegrity: false\r\n          });\r\n\r\n          // Test numpy after loading\r\n          try {\r\n            console.log(\"Testing numpy...\");\r\n            setLoadingStatus(prev => `${prev}\\nTesting numpy...`);\r\n            pyodideInstance.runPython('import numpy as np; np.array([1,2,3])');\r\n            console.log(\"Numpy test successful\");\r\n            setLoadingStatus(prev => `${prev}\\nNumpy test successful`);\r\n          } catch (e) {\r\n            console.error(\"Numpy test failed:\", e);\r\n            setError(prev => `${prev}\\nNumpy test failed: ${e.message}`);\r\n            throw e;\r\n          }\r\n\r\n          // Run garbage collection to free memory\r\n          if (pyodideInstance.runPython) {\r\n            try {\r\n              pyodideInstance.runPython('import gc; gc.collect()');\r\n            } catch (e) {\r\n              console.warn('Failed to run garbage collection:', e);\r\n            }\r\n          }\r\n          \r\n          clearTimeout(timeout);\r\n          setPyodide(pyodideInstance);\r\n          setLoadingStatus('Setup complete');\r\n          setError(null);\r\n        } catch (packageErr) {\r\n          console.error('Package loading error:', packageErr);\r\n          setError(`Failed to load packages: ${packageErr.message}`);\r\n          setLoadingStatus('Failed to load packages');\r\n          throw packageErr;\r\n        }\r\n      } catch (err) {\r\n        console.error('Pyodide error:', err);\r\n        setError(err.message);\r\n        setLoadingStatus('Failed');\r\n      }\r\n    };\r\n\r\n    loadPyodide();\r\n  }, []);\r\n\r\n  const LoadingIndicator = () => (\r\n      <div className=\"fixed bottom-4 right-4 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg max-w-md\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\r\n          <div className=\"text-sm font-medium whitespace-pre-wrap\">\r\n            {loadingStatus}{dots}\r\n          </div>\r\n        </div>\r\n        {error && (\r\n          <div className=\"mt-2 text-sm text-red-500 whitespace-pre-wrap overflow-auto max-h-32\">\r\n            {error}\r\n          </div>\r\n        )}\r\n      </div>\r\n  );\r\n\r\n  return (\r\n    <PanelContext.Provider value={{ pyodide, error, loadingStatus }}>\r\n      {loadingStatus !== 'Setup complete' && <LoadingIndicator />}\r\n      {children}\r\n    </PanelContext.Provider>\r\n  );\r\n};\r\n\r\nexport const PanelWindow = ({ \r\n  id, \r\n  initialPosition = { x: 100, y: 100 },\r\n  title = \"Panel Visualization\",\r\n  pythonCode,\r\n  className = \"\"\r\n}) => {\r\n  const { pyodide, error: contextError, loadingStatus } = usePanelContext();\r\n  const [error, setError] = useState(null);\r\n  const targetId = `panel-${id}`;\r\n\r\n  useEffect(() => {\r\n    const executeVisualization = async () => {\r\n      if (!pyodide) return;\r\n\r\n      try {\r\n        const code = `\r\nimport panel as pn\r\nimport numpy as np\r\n\r\n# Get the target div\r\ntarget = js.document.getElementById(\"${targetId}\")\r\nif target:\r\n    target.innerHTML = \"\"\r\n\r\n# Execute visualization code\r\n${pythonCode}\r\n`;\r\n        await pyodide.runPythonAsync(code);\r\n        setError(null);\r\n      } catch (err) {\r\n        setError(err.message || 'Unknown error occurred');\r\n      }\r\n    };\r\n\r\n    executeVisualization();\r\n  }, [pyodide, pythonCode, targetId]);\r\n\r\n  const renderContent = () => {\r\n    if (contextError || error) {\r\n      return (\r\n        <div className=\"p-4 bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-100 rounded\">\r\n          <div className=\"font-bold\">Error:</div>\r\n          <div className=\"text-sm mt-1\">{contextError || error}</div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (loadingStatus !== 'Setup complete') {\r\n      return (\r\n        <div className=\"p-4\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-2\"></div>\r\n            <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\r\n          </div>\r\n          <div className=\"mt-2 text-sm text-gray-600 dark:text-gray-400\">\r\n            {loadingStatus}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div \r\n        id={targetId}\r\n        className=\"min-h-[200px] min-w-[300px]\"\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <WindowWrapper\r\n      id={id}\r\n      initialPosition={initialPosition}\r\n      className={`bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden ${className}`}\r\n    >\r\n      <div data-window-header className=\"p-2 cursor-move bg-gray-100 dark:bg-gray-700 flex justify-between items-center\">\r\n        <span>{title}</span>\r\n      </div>\r\n      <div className=\"p-4\">\r\n        {renderContent()}\r\n      </div>\r\n    </WindowWrapper>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { PanelProvider, PanelWindow } from '../../components/panel';\r\nimport { WindowProvider } from '../../components/window';\r\n\r\nconst PanelTestContent = () => {\r\n  const [windows, setWindows] = useState([]);\r\n  const [nextId, setNextId] = useState(1);\r\n\r\n  const addSineWave = () => {\r\n    const id = `sine-wave-${nextId}`;\r\n    setWindows(prev => [...prev, {\r\n      id,\r\n      title: `Sine Wave ${nextId}`,\r\n      pythonCode: `\r\nimport numpy as np\r\nimport panel as pn\r\n\r\n# Create interactive widgets\r\namplitude = pn.widgets.FloatSlider(name='Amplitude', value=1, start=0, end=2)\r\nfrequency = pn.widgets.FloatSlider(name='Frequency', value=1, start=0, end=5)\r\nphase = pn.widgets.FloatSlider(name='Phase', value=0, start=0, end=2*np.pi)\r\n\r\n# Create the plot\r\nx = np.linspace(0, 10, 1000)\r\n\r\n@pn.depends(amplitude, frequency, phase)\r\ndef update_plot(amp, freq, ph):\r\n    y = amp * np.sin(freq * x + ph)\r\n    return pn.Column(\r\n        pn.pane.Markdown('## Interactive Sine Wave'),\r\n        pn.pane.Bokeh(pn.plotting.figure(height=300).line(x, y))\r\n    )\r\n\r\n# Create the layout\r\nlayout = pn.Column(\r\n    amplitude,\r\n    frequency,\r\n    phase,\r\n    update_plot\r\n)\r\n\r\nlayout.servable(target='${id}')\r\n      `\r\n    }]);\r\n    setNextId(prev => prev + 1);\r\n  };\r\n\r\n  const addWaveform = () => {\r\n    const id = `waveform-${nextId}`;\r\n    setWindows(prev => [...prev, {\r\n      id,\r\n      title: `Waveform ${nextId}`,\r\n      pythonCode: `\r\nimport numpy as np\r\nimport panel as pn\r\nimport datashader as ds\r\nimport pandas as pd\r\n\r\ntry:\r\n    # Create interactive parameters\r\n    points = pn.widgets.IntSlider(name='Points', value=1000, start=100, end=10000)\r\n    frequency = pn.widgets.FloatSlider(name='Frequency', value=1, start=0.1, end=10)\r\n    noise = pn.widgets.FloatSlider(name='Noise', value=0.1, start=0, end=1)\r\n\r\n    @pn.depends(points, frequency, noise)\r\n    def create_waveform(n_points, freq, noise_level):\r\n        try:\r\n            x = np.linspace(0, 10, n_points)\r\n            base = np.sin(2 * np.pi * freq * x)\r\n            noise_signal = np.random.normal(0, noise_level, n_points)\r\n            y = base + noise_signal\r\n            \r\n            # Create datashader plot\r\n            cvs = ds.Canvas(plot_width=400, plot_height=300)\r\n            df = pd.DataFrame({'x': x, 'y': y})\r\n            agg = cvs.line(df, 'x', 'y')\r\n            img = ds.transfer_functions.shade(agg)\r\n            \r\n            return pn.Column(\r\n                pn.pane.Markdown('## Noisy Waveform'),\r\n                pn.pane.PNG(img)\r\n            )\r\n        except Exception as e:\r\n            return pn.pane.Markdown(f'Error: {str(e)}')\r\nexcept Exception as e:\r\n    print(f'Setup error: {str(e)}')\r\n\r\n# Create layout\r\nlayout = pn.Column(\r\n    points,\r\n    frequency,\r\n    noise,\r\n    create_waveform\r\n)\r\n\r\nlayout.servable(target='${id}')\r\n      `\r\n    }]);\r\n    setNextId(prev => prev + 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 space-y-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"space-x-4\">\r\n          <button\r\n            onClick={addSineWave}\r\n            className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n          >\r\n            Add Sine Wave\r\n          </button>\r\n          <button\r\n            onClick={addWaveform}\r\n            className=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors\"\r\n          >\r\n            Add Waveform\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"text-sm text-gray-600 dark:text-gray-300\">\r\n        Create interactive visualizations by adding windows. Each window runs Python code in your browser using WASM.\r\n      </div>\r\n\r\n      {windows.map((window, index) => (\r\n        <PanelWindow\r\n          key={window.id}\r\n          id={window.id}\r\n          title={window.title}\r\n          pythonCode={window.pythonCode}\r\n          initialPosition={{ x: 100 + index * 50, y: 100 + index * 50 }}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PanelTest = () => {\r\n  return (\r\n    <WindowProvider>\r\n      <PanelProvider>\r\n        <PanelTestContent />\r\n      </PanelProvider>\r\n    </WindowProvider>\r\n  );\r\n};\r\n\r\nexport default PanelTest;\r\n","import { useEffect } from 'react';\r\nimport { useSidebar } from '../../layout/SidebarContext';\r\nimport { useWindowContext } from '../index';\r\n\r\nconst SIDEBAR_WIDTH = 240; // Standard sidebar width in pixels\r\n\r\nexport const useWindowPosition = (windowId, defaultPosition) => {\r\n  const { isSidebarCollapsed } = useSidebar();\r\n  const { windows, registerWindow, updateWindowPosition } = useWindowContext();\r\n\r\n  useEffect(() => {\r\n    // Register window with initial position if not already registered\r\n    if (!windows[windowId]) {\r\n      registerWindow(windowId, defaultPosition);\r\n    }\r\n  }, [windowId, defaultPosition, registerWindow, windows]);\r\n\r\n  useEffect(() => {\r\n    const currentWindow = windows[windowId];\r\n    if (!currentWindow) return;\r\n\r\n    // Calculate the difference in sidebar width\r\n    const previousOffset = isSidebarCollapsed ? 0 : SIDEBAR_WIDTH;\r\n    const newOffset = isSidebarCollapsed ? -SIDEBAR_WIDTH : 0;\r\n    const offsetDiff = newOffset - previousOffset;\r\n\r\n    // Update position relative to current position, not initial position\r\n    const newPosition = {\r\n      x: currentWindow.position.x + offsetDiff,\r\n      y: currentWindow.position.y\r\n    };\r\n\r\n    updateWindowPosition(windowId, newPosition);\r\n  }, [isSidebarCollapsed, windowId, windows, updateWindowPosition]);\r\n\r\n  return {\r\n    position: windows[windowId]?.position || defaultPosition,\r\n    isVisible: windows[windowId]?.isVisible ?? true,\r\n    zIndex: windows[windowId]?.zIndex ?? 1\r\n  };\r\n};\r\n","import React, { createContext, useContext, useState, useCallback } from 'react';\r\n\r\nconst WindowContext = createContext();\r\n\r\n// Re-export the hook for easier imports\r\nexport * from './hooks/useWindowPosition';\r\n\r\nexport const useWindowContext = () => {\r\n  const context = useContext(WindowContext);\r\n  if (!context) {\r\n    throw new Error('useWindowContext must be used within a WindowProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const WindowProvider = ({ children }) => {\r\n  const [windows, setWindows] = useState({});\r\n\r\n  const registerWindow = useCallback((id, initialPosition) => {\r\n    setWindows(prev => {\r\n      // Only register if window doesn't exist\r\n      if (prev[id]) return prev;\r\n      \r\n      return {\r\n        ...prev,\r\n        [id]: {\r\n          position: initialPosition,\r\n          initialPosition,\r\n          isVisible: true,\r\n          zIndex: Object.keys(prev).length + 1\r\n        }\r\n      };\r\n    });\r\n  }, []);\r\n\r\n  const updateWindowPosition = useCallback((id, position) => {\r\n    setWindows(prev => ({\r\n      ...prev,\r\n      [id]: {\r\n        ...prev[id],\r\n        position\r\n      }\r\n    }));\r\n  }, []);\r\n\r\n  const toggleWindowVisibility = useCallback((id) => {\r\n    setWindows(prev => ({\r\n      ...prev,\r\n      [id]: {\r\n        ...prev[id],\r\n        isVisible: !prev[id]?.isVisible\r\n      }\r\n    }));\r\n  }, []);\r\n\r\n  const bringToFront = useCallback((id) => {\r\n    setWindows(prev => {\r\n      const maxZ = Math.max(...Object.values(prev).map(w => w.zIndex));\r\n      return {\r\n        ...prev,\r\n        [id]: {\r\n          ...prev[id],\r\n          zIndex: maxZ + 1\r\n        }\r\n      };\r\n    });\r\n  }, []);\r\n\r\n  const value = {\r\n    windows,\r\n    registerWindow,\r\n    updateWindowPosition,\r\n    toggleWindowVisibility,\r\n    bringToFront\r\n  };\r\n\r\n  return (\r\n    <WindowContext.Provider value={value}>\r\n      {children}\r\n    </WindowContext.Provider>\r\n  );\r\n};\r\n","import { DndContext, useDraggable, defaultCoordinates } from '@dnd-kit/core';\r\nimport { useZoom } from '../../canvas/ZoomContext';\r\n\r\n/**\r\n * Custom hook that provides drag functionality using dnd-kit\r\n */\r\nexport const useScaledDrag = ({ id, position }) => {\r\n  const { scale } = useZoom();\r\n  \r\n  return useDraggable({\r\n    id,\r\n    data: { position }\r\n  });\r\n};\r\n\r\n/**\r\n * DragProvider component that provides DnD context with scaling support\r\n */\r\nexport const DragProvider = ({ children, onDragEnd }) => {\r\n  const { scale } = useZoom();\r\n\r\n  return (\r\n    <DndContext \r\n      onDragEnd={onDragEnd}\r\n      modifiers={[\r\n        ({ transform }) => ({\r\n          ...transform,\r\n          x: transform.x / scale,\r\n          y: transform.y / scale,\r\n        })\r\n      ]}\r\n    >\r\n      {children}\r\n    </DndContext>\r\n  );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useWindowContext } from '../index.jsx';\r\nimport { useZoom } from '../../canvas/ZoomContext';\r\nimport { useScaledDrag, DragProvider } from './DndKit';\r\n\r\n/**\r\n * @typedef {Object} Position\r\n * @property {number} x - The x coordinate\r\n * @property {number} y - The y coordinate\r\n */\r\n\r\n/**\r\n * @typedef {Object} WindowData\r\n * @property {Position} position - Current window position\r\n * @property {boolean} isVisible - Window visibility state\r\n * @property {number} zIndex - Window stack order\r\n */\r\n\r\n/**\r\n * @typedef {Object} WindowProps\r\n * @property {string} id - Unique identifier for the window\r\n * @property {React.ReactNode} children - Window content including header and body\r\n * @property {Position} initialPosition - Starting position of the window\r\n * @property {string} [className] - Additional CSS classes\r\n * @property {Object} [dragConstraints] - Constraints for dragging behavior\r\n */\r\n\r\n// Drag style configurations\r\nconst DRAG_STYLES = {\r\n  dragging: 'cursor-move',\r\n  idle: 'cursor-move',\r\n  base: 'absolute window-draggable'\r\n};\r\n\r\n/**\r\n * Splits children into header and content components\r\n * @param {React.ReactNode} children - Child components to split\r\n * @returns {[React.ReactElement, React.ReactElement[]]} Tuple of [header, content]\r\n */\r\nconst splitWindowChildren = (children) => {\r\n  const childArray = React.Children.toArray(children);\r\n  const header = childArray.find(child => child.props?.['data-window-header']);\r\n  const content = childArray.filter(child => !child.props?.['data-window-header']);\r\n  return [header, content];\r\n};\r\n\r\n/**\r\n * Internal component that handles the window content and interactions\r\n * @param {WindowProps & {\r\n *   windowData: WindowData,\r\n *   registerWindow: (id: string, position: Position) => void,\r\n *   updateWindowPosition: (id: string, position: Position) => void,\r\n *   bringToFront: (id: string) => void,\r\n *   toggleWindowVisibility: (id: string) => void\r\n * }} props\r\n */\r\nconst WindowContent = React.memo(({ \r\n  id,\r\n  children,\r\n  initialPosition,\r\n  className = '',\r\n  dragConstraints,\r\n  windowData,\r\n  registerWindow,\r\n  updateWindowPosition,\r\n  bringToFront,\r\n  toggleWindowVisibility\r\n}) => {\r\n  // Get current zoom scale\r\n  const { scale } = useZoom();\r\n\r\n  // Register window with management system on mount\r\n  useEffect(() => {\r\n    registerWindow(id, initialPosition);\r\n  }, [id, initialPosition, registerWindow]);\r\n\r\n  // Split children into header and content\r\n  const [header, content] = splitWindowChildren(children);\r\n\r\n  // Setup drag handling with scaled coordinates\r\n  const {\r\n    setNodeRef,\r\n    attributes,\r\n    listeners,\r\n    style: dragStyle,\r\n    isDragging: isDraggingDnd,\r\n    transform: dndTransform\r\n  } = useScaledDrag({\r\n    id,\r\n    position: windowData.position\r\n  });\r\n\r\n  // Bring window to front when starting drag\r\n  useEffect(() => {\r\n    if (isDraggingDnd) {\r\n      bringToFront(id);\r\n    }\r\n  }, [isDraggingDnd, bringToFront, id]);\r\n\r\n  // Compute dynamic styles\r\n  const headerClassName = `${header.props.className || ''} ${\r\n    isDraggingDnd ? DRAG_STYLES.dragging : DRAG_STYLES.idle\r\n  }`;\r\n\r\n  const basePosition = {\r\n    x: windowData.position.x,\r\n    y: windowData.position.y\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={setNodeRef}\r\n      style={{\r\n        display: windowData.isVisible ? 'block' : 'none',\r\n        position: 'absolute',\r\n        transform: `translate3d(${basePosition.x + (dndTransform?.x || 0)}px, ${basePosition.y + (dndTransform?.y || 0)}px, 0)`,\r\n        zIndex: windowData.zIndex,\r\n        touchAction: 'none',\r\n        ...dragStyle\r\n      }}\r\n      className={`${DRAG_STYLES.base} ${className}`}\r\n      onClick={() => bringToFront(id)}\r\n    >\r\n      <div className=\"h-full\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between w-full\">\r\n          {/* Draggable title area */}\r\n          <div {...attributes} {...listeners} className={`flex-1 ${headerClassName}`}>\r\n            {header.props.children}\r\n          </div>\r\n          {/* Controls area */}\r\n          <button\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              toggleWindowVisibility(id);\r\n            }}\r\n            className=\"text-gray-400 hover:text-white transition-colors w-8 h-8 flex items-center justify-center flex-lg hover:bg-gray-700\"\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n        \r\n        {/* Content */}\r\n        <div className=\"pointer-events-auto\">\r\n          {content}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\n// Set display name for debugging\r\nWindowContent.displayName = 'WindowContent';\r\n\r\n/**\r\n * Window wrapper component providing window management capabilities\r\n * Handles window registration, positioning, and drag interactions\r\n * @param {WindowProps} props\r\n */\r\nexport const WindowWrapper = (props) => {\r\n  const { \r\n    windows,\r\n    registerWindow,\r\n    updateWindowPosition,\r\n    bringToFront,\r\n    toggleWindowVisibility\r\n  } = useWindowContext();\r\n\r\n  // Get window data from context\r\n  const windowData = windows[props.id];\r\n  if (!windowData) return null;\r\n\r\n  const { scale } = useZoom();\r\n\r\n  const handleDragEnd = (event) => {\r\n    if (event.delta) {\r\n      const newPosition = {\r\n        x: windowData.position.x + (event.delta.x),\r\n        y: windowData.position.y + (event.delta.y)\r\n      };\r\n      updateWindowPosition(props.id, newPosition);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DragProvider onDragEnd={handleDragEnd}>\r\n      <WindowContent\r\n        {...props}\r\n        windowData={windowData}\r\n        registerWindow={registerWindow}\r\n        updateWindowPosition={updateWindowPosition}\r\n        bringToFront={bringToFront}\r\n        toggleWindowVisibility={toggleWindowVisibility}\r\n      />\r\n    </DragProvider>\r\n  );\r\n};\r\n"],"names":["PanelContext","createContext","PanelProvider","_ref","children","pyodide","setPyodide","useState","error","setError","loadingStatus","setLoadingStatus","dots","setDots","useEffect","interval","setInterval","d","length","clearInterval","async","WebAssembly","errMsg","Error","SharedArrayBuffer","window","loadPyodide","console","log","webAssembly","sharedArrayBuffer","crossOriginIsolated","pyodideAvailable","timeout","setTimeout","pyodideInstance","indexURL","stdout","msg","prev","stderr","version","runPython","e","message","loadPackage","messageCallback","checkIntegrity","warn","clearTimeout","packageErr","err","LoadingIndicator","_jsxs","className","_jsx","Provider","value","PanelWindow","_ref2","id","initialPosition","x","y","title","pythonCode","contextError","usePanelContext","context","useContext","targetId","code","runPythonAsync","executeVisualization","WindowWrapper","PanelTestContent","windows","setWindows","nextId","setNextId","onClick","addSineWave","addWaveform","map","index","PanelTest","WindowProvider","WindowContext","useWindowContext","registerWindow","useCallback","position","isVisible","zIndex","Object","keys","updateWindowPosition","toggleWindowVisibility","_prev$id","bringToFront","maxZ","Math","max","values","w","DragProvider","onDragEnd","scale","useZoom","DndContext","modifiers","_ref3","transform","DRAG_STYLES","WindowContent","React","dragConstraints","windowData","header","content","childArray","toArray","find","child","_child$props","props","filter","_child$props2","splitWindowChildren","setNodeRef","attributes","listeners","style","dragStyle","isDragging","isDraggingDnd","dndTransform","useDraggable","data","useScaledDrag","headerClassName","basePosition","ref","display","touchAction","stopPropagation","displayName","event","delta","newPosition"],"sourceRoot":""}