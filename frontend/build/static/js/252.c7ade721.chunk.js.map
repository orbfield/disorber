{"version":3,"file":"static/js/252.c7ade721.chunk.js","mappings":"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","sources":["components/window/wrapper/DndKit.jsx","components/window/wrapper/index.jsx","components/gallery/index.jsx","config/imageResolutions.js","Pages/DynamicGallery.jsx"],"sourcesContent":["import { DndContext, useDraggable, defaultCoordinates } from '@dnd-kit/core';\r\nimport { useZoom } from '../../canvas/ZoomContext';\r\n\r\n/**\r\n * Custom hook that provides drag functionality using dnd-kit\r\n */\r\nexport const useScaledDrag = ({ id, position }) => {\r\n  const { scale } = useZoom();\r\n  \r\n  return useDraggable({\r\n    id,\r\n    data: { position }\r\n  });\r\n};\r\n\r\n/**\r\n * DragProvider component that provides DnD context with scaling support\r\n */\r\nexport const DragProvider = ({ children, onDragEnd }) => {\r\n  const { scale } = useZoom();\r\n\r\n  return (\r\n    <DndContext \r\n      onDragEnd={onDragEnd}\r\n      modifiers={[\r\n        ({ transform }) => ({\r\n          ...transform,\r\n          x: transform.x / scale,\r\n          y: transform.y / scale,\r\n        })\r\n      ]}\r\n    >\r\n      {children}\r\n    </DndContext>\r\n  );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useWindowContext } from '../index.jsx';\r\nimport { useZoom } from '../../canvas/ZoomContext';\r\nimport { useScaledDrag, DragProvider } from './DndKit';\r\n\r\n/**\r\n * @typedef {Object} Position\r\n * @property {number} x - The x coordinate\r\n * @property {number} y - The y coordinate\r\n */\r\n\r\n/**\r\n * @typedef {Object} WindowData\r\n * @property {Position} position - Current window position\r\n * @property {boolean} isVisible - Window visibility state\r\n * @property {number} zIndex - Window stack order\r\n */\r\n\r\n/**\r\n * @typedef {Object} WindowProps\r\n * @property {string} id - Unique identifier for the window\r\n * @property {React.ReactNode} children - Window content including header and body\r\n * @property {Position} initialPosition - Starting position of the window\r\n * @property {string} [className] - Additional CSS classes\r\n * @property {Object} [dragConstraints] - Constraints for dragging behavior\r\n */\r\n\r\n// Drag style configurations\r\nconst DRAG_STYLES = {\r\n  dragging: 'cursor-move',\r\n  idle: 'cursor-move',\r\n  base: 'absolute window-draggable'\r\n};\r\n\r\n/**\r\n * Splits children into header and content components\r\n * @param {React.ReactNode} children - Child components to split\r\n * @returns {[React.ReactElement, React.ReactElement[]]} Tuple of [header, content]\r\n */\r\nconst splitWindowChildren = (children) => {\r\n  const childArray = React.Children.toArray(children);\r\n  const header = childArray.find(child => child.props?.['data-window-header']);\r\n  const content = childArray.filter(child => !child.props?.['data-window-header']);\r\n  return [header, content];\r\n};\r\n\r\n/**\r\n * Internal component that handles the window content and interactions\r\n * @param {WindowProps & {\r\n *   windowData: WindowData,\r\n *   registerWindow: (id: string, position: Position) => void,\r\n *   updateWindowPosition: (id: string, position: Position) => void,\r\n *   bringToFront: (id: string) => void,\r\n *   toggleWindowVisibility: (id: string) => void\r\n * }} props\r\n */\r\nconst WindowContent = React.memo(({ \r\n  id,\r\n  children,\r\n  initialPosition,\r\n  className = '',\r\n  dragConstraints,\r\n  windowData,\r\n  registerWindow,\r\n  updateWindowPosition,\r\n  bringToFront,\r\n  toggleWindowVisibility\r\n}) => {\r\n  // Get current zoom scale\r\n  const { scale } = useZoom();\r\n\r\n  // Register window with management system on mount\r\n  useEffect(() => {\r\n    registerWindow(id, initialPosition);\r\n  }, [id, initialPosition, registerWindow]);\r\n\r\n  // Split children into header and content\r\n  const [header, content] = splitWindowChildren(children);\r\n\r\n  // Setup drag handling with scaled coordinates\r\n  const {\r\n    setNodeRef,\r\n    attributes,\r\n    listeners,\r\n    style: dragStyle,\r\n    isDragging: isDraggingDnd,\r\n    transform: dndTransform\r\n  } = useScaledDrag({\r\n    id,\r\n    position: windowData.position\r\n  });\r\n\r\n  // Bring window to front when starting drag\r\n  useEffect(() => {\r\n    if (isDraggingDnd) {\r\n      bringToFront(id);\r\n    }\r\n  }, [isDraggingDnd, bringToFront, id]);\r\n\r\n  // Compute dynamic styles\r\n  const headerClassName = `${header.props.className || ''} ${\r\n    isDraggingDnd ? DRAG_STYLES.dragging : DRAG_STYLES.idle\r\n  }`;\r\n\r\n  const basePosition = {\r\n    x: windowData.position.x,\r\n    y: windowData.position.y\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={setNodeRef}\r\n      style={{\r\n        display: windowData.isVisible ? 'block' : 'none',\r\n        position: 'absolute',\r\n        transform: `translate3d(${basePosition.x + (dndTransform?.x || 0)}px, ${basePosition.y + (dndTransform?.y || 0)}px, 0)`,\r\n        zIndex: windowData.zIndex,\r\n        touchAction: 'none',\r\n        ...dragStyle\r\n      }}\r\n      className={`${DRAG_STYLES.base} ${className}`}\r\n      onClick={() => bringToFront(id)}\r\n    >\r\n      <div className=\"h-full\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between w-full\">\r\n          {/* Draggable title area */}\r\n          <div {...attributes} {...listeners} className={`flex-1 ${headerClassName}`}>\r\n            {header.props.children}\r\n          </div>\r\n          {/* Controls area */}\r\n          <button\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              toggleWindowVisibility(id);\r\n            }}\r\n            className=\"text-gray-400 hover:text-white transition-colors w-8 h-8 flex items-center justify-center flex-lg hover:bg-gray-700\"\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n        \r\n        {/* Content */}\r\n        <div className=\"pointer-events-auto\">\r\n          {content}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\n// Set display name for debugging\r\nWindowContent.displayName = 'WindowContent';\r\n\r\n/**\r\n * Window wrapper component providing window management capabilities\r\n * Handles window registration, positioning, and drag interactions\r\n * @param {WindowProps} props\r\n */\r\nexport const WindowWrapper = (props) => {\r\n  // Move all hooks to the top level\r\n  const { \r\n    windows,\r\n    registerWindow,\r\n    updateWindowPosition,\r\n    bringToFront,\r\n    toggleWindowVisibility\r\n  } = useWindowContext();\r\n  \r\n  const { scale } = useZoom();\r\n\r\n  // Get window data from context\r\n  const windowData = windows[props.id];\r\n  \r\n  // Early return after all hooks have been called\r\n  if (!windowData) return null;\r\n\r\n  const handleDragEnd = (event) => {\r\n    if (event.delta) {\r\n      const newPosition = {\r\n        x: windowData.position.x + (event.delta.x),\r\n        y: windowData.position.y + (event.delta.y)\r\n      };\r\n      updateWindowPosition(props.id, newPosition);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DragProvider onDragEnd={handleDragEnd}>\r\n      <WindowContent\r\n        {...props}\r\n        windowData={windowData}\r\n        registerWindow={registerWindow}\r\n        updateWindowPosition={updateWindowPosition}\r\n        bringToFront={bringToFront}\r\n        toggleWindowVisibility={toggleWindowVisibility}\r\n      />\r\n    </DragProvider>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { Layout, Folder } from 'lucide-react';\r\nimport PropTypes from 'prop-types';\r\nimport { useWindowContext } from '../window/index';\r\nimport { WindowWrapper } from '../window/wrapper/index';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n/**\r\n * @typedef {Object} GalleryImage\r\n * @property {string} thumb - URL of the thumbnail image\r\n * @property {string} full - URL of the full-size image\r\n * @property {string} [alt] - Alternative text for the image\r\n * @property {boolean} [isDirectory] - Whether this image represents a directory\r\n * @property {string} [directoryId] - ID of the directory if this is a directory preview\r\n * @property {Array} [thumbnails] - Array of thumbnail images for directory previews\r\n */\r\n\r\n/**\r\n * Gallery component that displays a grid of images with popup window functionality\r\n * @param {Object} props\r\n * @param {GalleryImage[]} [props.images=[]] - Array of image objects to display\r\n * @returns {JSX.Element} Gallery component\r\n */\r\nexport function Gallery({ images = [] }) {\r\n  const { registerWindow, toggleWindowVisibility, windows } = useWindowContext();\r\n  const [activeWindows, setActiveWindows] = useState(new Set());\r\n  const navigate = useNavigate();\r\n\r\n  /**\r\n   * Handles opening a new window or navigating to a directory\r\n   * @param {string} id - Window identifier\r\n   * @param {Object} image - Image object with full URL and directory info\r\n   */\r\n  const handleOpenWindow = (id, image) => {\r\n    if (image.isDirectory) {\r\n      navigate(`/gallery/${image.directoryId}`);\r\n      return;\r\n    }\r\n\r\n    const existingWindow = windows[id];\r\n    if (existingWindow && !existingWindow.isVisible) {\r\n      // If window exists but is hidden, just toggle visibility\r\n      toggleWindowVisibility(id);\r\n      return;\r\n    }\r\n    \r\n    if (!activeWindows.has(id)) {\r\n      const width = 400;\r\n      const height = 400;\r\n      // Position in viewport coordinates (WindowWrapper handles scaling)\r\n      const x = Math.max(0, Math.random() * (window.innerWidth - width));\r\n      const y = Math.max(0, Math.random() * (window.innerHeight - height));\r\n      \r\n      registerWindow(id, {\r\n        x, y, width, height,\r\n        onClose: () => setActiveWindows(prev => {\r\n          const next = new Set(prev);\r\n          next.delete(id);\r\n          return next;\r\n        })\r\n      });\r\n      \r\n      setActiveWindows(prev => new Set([...prev, id]));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 container mx-auto\">\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-8\">\r\n        {images.map((img, idx) => (\r\n          <ImageThumbnail\r\n            key={idx}\r\n            src={img.thumb}\r\n            alt={img.alt || ''}\r\n            isDirectory={img.isDirectory}\r\n            directoryId={img.directoryId}\r\n            thumbnails={img.thumbnails}\r\n            onClick={() => handleOpenWindow(`gallery-window-${idx}`, img)}\r\n          />\r\n        ))}\r\n      </div>\r\n      \r\n      {Array.from(activeWindows).map(id => {\r\n        const idx = parseInt(id.split('-').pop());\r\n        const img = images[idx];\r\n        // Only render window if image exists, is not a directory, and has a full image URL\r\n        return img && !img.isDirectory && img.full ? (\r\n          <GalleryWindow\r\n            key={id}\r\n            id={id}\r\n            imageUrl={img.full}\r\n            toggleVisibility={() => toggleWindowVisibility(id)}\r\n          />\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Image thumbnail component with hover effects\r\n * @param {Object} props\r\n * @param {string} props.src - Source URL of the thumbnail image\r\n * @param {string} props.alt - Alternative text for the image\r\n * @param {boolean} [props.isDirectory] - Whether this thumbnail represents a directory\r\n * @param {string} [props.directoryId] - ID of the directory if this is a directory preview\r\n * @param {Array} [props.thumbnails] - Array of thumbnail images for directory previews\r\n * @param {() => void} props.onClick - Click handler for the thumbnail\r\n * @returns {JSX.Element} ImageThumbnail component\r\n */\r\nfunction ImageThumbnail({ src, alt, isDirectory, directoryId, thumbnails, onClick }) {\r\n  if (isDirectory && thumbnails) {\r\n    return (\r\n      <motion.div\r\n        className=\"relative group cursor-pointer overflow-hidden rounded-lg bg-gray-900\"\r\n        whileHover={{ scale: 1.02 }}\r\n        onClick={onClick}\r\n      >\r\n        <div className=\"aspect-square w-full\">\r\n          <div className=\"grid grid-cols-2 gap-2 p-2 h-full\">\r\n            {thumbnails.map((thumb, idx) => (\r\n              <div key={idx} className=\"aspect-square overflow-hidden\">\r\n                <img\r\n                  src={thumb.thumb}\r\n                  alt={thumb.alt}\r\n                  className=\"w-full h-full object-cover\"\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center\">\r\n          <div className=\"flex flex-col items-center gap-2\">\r\n            <Folder className=\"w-6 h-6 text-white\" />\r\n            <span className=\"text-white text-lg font-semibold\">\r\n              {alt}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </motion.div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <motion.div\r\n      className=\"relative group cursor-pointer overflow-hidden rounded-lg\"\r\n      whileHover={{ scale: 1.02 }}\r\n      onClick={onClick}\r\n    >\r\n      <img\r\n        src={src}\r\n        alt={alt}\r\n        className=\"w-full h-48 object-cover transition-transform duration-200 group-hover:scale-105\"\r\n      />\r\n      <div className=\"absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <span className=\"text-white text-sm\">\r\n            View Full Size\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n}\r\n\r\n/**\r\n * Gallery window component that displays a full-size image in a draggable window\r\n * @param {Object} props\r\n * @param {string} props.id - Unique identifier for the window\r\n * @param {string} props.imageUrl - URL of the full-size image\r\n * @param {() => void} props.toggleVisibility - Function to toggle window visibility\r\n * @returns {JSX.Element} GalleryWindow component\r\n */\r\nfunction GalleryWindow({ id, imageUrl, toggleVisibility }) {\r\n  /**\r\n   * Extracts the image filename from a URL\r\n   * @param {string} url - The full image URL\r\n   * @returns {string} The extracted filename or 'Image' if extraction fails\r\n   */\r\n  const getImageName = (url) => {\r\n    try {\r\n      const urlParts = url.split('/');\r\n      return decodeURIComponent(urlParts[urlParts.length - 1]);\r\n    } catch (e) {\r\n      return 'Image';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <WindowWrapper\r\n      id={id}\r\n      className=\"bg-gray-800/70 backdrop-blur-lg border border-cyan-500/20 flex-lg shadow-lg\"\r\n    >\r\n      <div \r\n        data-window-header\r\n        className=\"flex items-center py-1 px-2 border-b border-gray-700 bg-gray-900 flex-t-lg\"\r\n      >\r\n        <div className=\"flex items-center gap-2 px-2\">\r\n          <Layout className=\"w-4 h-4 text-cyan-500\" />\r\n          <h2 className=\"text-white font-semibold text-sm truncate max-w-[280px]\">{getImageName(imageUrl)}</h2>\r\n        </div>\r\n      </div>\r\n      <div className=\"h-full bg-black/10\">\r\n        <img src={imageUrl} alt=\"\" className=\"w-full h-full object-contain\" />\r\n      </div>\r\n    </WindowWrapper>\r\n  );\r\n}\r\n\r\nGallery.propTypes = {\r\n  images: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      thumb: PropTypes.string,\r\n      full: PropTypes.string,\r\n      alt: PropTypes.string,\r\n      isDirectory: PropTypes.bool,\r\n      directoryId: PropTypes.string,\r\n      thumbnails: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          thumb: PropTypes.string.isRequired,\r\n          full: PropTypes.string.isRequired,\r\n          alt: PropTypes.string\r\n        })\r\n      )\r\n    })\r\n  )\r\n};\r\n\r\nImageThumbnail.propTypes = {\r\n  src: PropTypes.string,\r\n  alt: PropTypes.string.isRequired,\r\n  isDirectory: PropTypes.bool,\r\n  directoryId: PropTypes.string,\r\n  thumbnails: PropTypes.array,\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n\r\nGalleryWindow.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  imageUrl: PropTypes.string.isRequired,\r\n  toggleVisibility: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Gallery;\r\n","/**\r\n * Standard image resolution mappings\r\n * Maps pixel sizes to descriptive categories\r\n */\r\nexport const RESOLUTIONS = {\r\n  50: 'small',   // Thumbnail size\r\n  300: 'medium', // Standard viewing size\r\n  1000: 'large'  // High resolution size\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Gallery } from '../components/gallery';\r\nimport { WindowProvider } from '../components/window';\r\nimport { scanMediaDirectory, getMediaUrl } from '../media/mediaScanner';\r\nimport { RESOLUTIONS } from '../config/imageResolutions';\r\n\r\n/**\r\n * Extracts media files from a directory tree based on a target path\r\n * @param {Array} nodes - Directory tree nodes\r\n * @param {string} targetPath - Target path to filter files\r\n * @returns {Array} Filtered media files\r\n */\r\n/**\r\n * Finds all GIF files in a directory and its subdirectories\r\n * @param {Array} nodes - Directory tree nodes\r\n * @returns {Array} All GIF files found\r\n */\r\nconst findAllGifFiles = (nodes) => {\r\n  return nodes.flatMap(node => {\r\n    if (node.type === 'gif') return [node];\r\n    if (node.children) return findAllGifFiles(node.children);\r\n    return [];\r\n  });\r\n};\r\n\r\n/**\r\n * Checks if a directory contains subdirectories\r\n * @param {Object} node - Directory node\r\n * @returns {boolean} True if directory has subdirectories\r\n */\r\nconst hasSubdirectories = (node) => {\r\n  return node.children?.some(child => !child.type) || false;\r\n};\r\n\r\n// Configuration for gallery directory previews\r\nconst PREVIEW_CONFIG = {\r\n  thumbnailsPerDirectory: 4  // Number of thumbnails to show per directory preview\r\n};\r\n\r\n/**\r\n * Gets random 50px thumbnails from a directory's files\r\n * @param {Array} files - Array of files\r\n * @param {number} count - Number of thumbnails to return\r\n * @returns {Array} Array of random thumbnail files\r\n */\r\nconst getRandomThumbnails = (files, count) => {\r\n  const thumbnails = files.filter(file => {\r\n    const metadata = parseGifFilename(file.text);\r\n    return metadata && metadata.resolution === 50;\r\n  });\r\n\r\n  // If we don't have enough thumbnails, return all we have\r\n  if (thumbnails.length <= count) {\r\n    return thumbnails;\r\n  }\r\n\r\n  // Randomly select unique thumbnails\r\n  const selected = new Set();\r\n  const result = [];\r\n  while (result.length < count && result.length < thumbnails.length) {\r\n    const randomIndex = Math.floor(Math.random() * thumbnails.length);\r\n    const thumbnail = thumbnails[randomIndex];\r\n    if (!selected.has(thumbnail.path)) {\r\n      selected.add(thumbnail.path);\r\n      result.push(thumbnail);\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Extracts media files based on directory level\r\n * @param {Array} nodes - Directory tree nodes\r\n * @param {string} targetPath - Target path to filter files\r\n * @returns {Array} Filtered media files and directory previews\r\n */\r\nconst extractMediaFiles = (nodes, targetPath) => {\r\n  // For root or intermediate directories, return directory previews\r\n  if (!targetPath || hasSubdirectories(nodes.find(n => n.id === targetPath) || { children: [] })) {\r\n    return nodes\r\n      .filter(node => !node.type && node.children) // Only directories\r\n      .flatMap(dir => {\r\n        // If we're in a specific directory (not root) and it has only one subdirectory\r\n        if (targetPath && dir.children.length === 1 && !dir.children[0].type) {\r\n          const subdir = dir.children[0];\r\n          const allFiles = findAllGifFiles([subdir]);\r\n          const thumbnails = getRandomThumbnails(allFiles, PREVIEW_CONFIG.thumbnailsPerDirectory);\r\n          if (thumbnails.length === 0) return [];\r\n          \r\n          return [{\r\n            thumbnails: thumbnails.map(thumbnail => ({\r\n              thumb: getMediaUrl(thumbnail.path),\r\n              full: getMediaUrl(thumbnail.path),\r\n              alt: thumbnail.alt || `${subdir.text} preview`\r\n            })),\r\n            directoryId: `${targetPath}/${subdir.id.split('/').pop()}`,\r\n            directoryName: subdir.text,\r\n            isDirectory: true,\r\n            alt: subdir.text\r\n          }];\r\n        }\r\n        \r\n        // Otherwise process directory normally\r\n        const allFiles = findAllGifFiles([dir]);\r\n        const thumbnails = getRandomThumbnails(allFiles, PREVIEW_CONFIG.thumbnailsPerDirectory);\r\n        if (thumbnails.length === 0) return [];\r\n        \r\n        return [{\r\n          thumbnails: thumbnails.map(thumbnail => ({\r\n            thumb: getMediaUrl(thumbnail.path),\r\n            full: getMediaUrl(thumbnail.path),\r\n            alt: thumbnail.alt || `${dir.text} preview`\r\n          })),\r\n          directoryId: targetPath ? `${targetPath}/${dir.id.split('/').pop()}` : dir.id,\r\n          directoryName: dir.text,\r\n          isDirectory: true,\r\n          alt: dir.text\r\n        }];\r\n      }); // flatMap automatically removes empty arrays\r\n  }\r\n  \r\n  // For leaf directories, return all files\r\n  return nodes.flatMap(node => {\r\n    const nodeMatches = node.id === targetPath || \r\n                       (node.path && node.path.startsWith(targetPath + '/'));\r\n    \r\n    if (nodeMatches) {\r\n      if (node.type === 'gif') return [node];\r\n      if (node.children) return extractMediaFiles(node.children, targetPath);\r\n    }\r\n    \r\n    if (node.children) return extractMediaFiles(node.children, targetPath);\r\n    return [];\r\n  });\r\n};\r\n\r\n/**\r\n * Extracts metadata from a GIF filename\r\n * @param {string} filename - Format: \"name-resolution.gif\" (e.g., \"1-0.2-50.gif\")\r\n * @returns {{ baseName: string, resolution: number } | null}\r\n */\r\nconst parseGifFilename = (filename) => {\r\n  if (!filename.endsWith('.gif')) return null;\r\n  \r\n  // Remove .gif extension\r\n  const name = filename.replace('.gif', '');\r\n  \r\n  // Extract resolution (last number after last dash)\r\n  const lastDashIndex = name.lastIndexOf('-');\r\n  if (lastDashIndex === -1) return null;\r\n  \r\n  const resolution = parseInt(name.substring(lastDashIndex + 1));\r\n  const baseName = name.substring(0, lastDashIndex);\r\n  \r\n  if (isNaN(resolution)) return null;\r\n  \r\n  return {\r\n    baseName,\r\n    resolution\r\n  };\r\n};\r\n\r\n/**\r\n * Groups GIF files by base name with their resolution variants\r\n * @param {Array} files - Array of media file objects\r\n * @returns {Object} Grouped files by base name with resolution variants\r\n */\r\nconst groupFilesByVariants = (files) => {\r\n  const groups = {};\r\n\r\n  files.forEach(file => {\r\n    const metadata = parseGifFilename(file.text);\r\n    if (!metadata) {\r\n      return;\r\n    }\r\n\r\n    const { baseName, resolution } = metadata;\r\n    if (!groups[baseName]) {\r\n      groups[baseName] = { variants: {} };\r\n    }\r\n\r\n    const sizeCategory = RESOLUTIONS[resolution] || 'custom';\r\n    \r\n    groups[baseName].variants[sizeCategory] = {\r\n      path: file.path,\r\n      resolution\r\n    };\r\n  });\r\n  return groups;\r\n};\r\n\r\n/**\r\n * Creates a gallery image object from variants\r\n * @param {string} baseName - Base name of the image\r\n * @param {Object} versions - Object containing image variants\r\n * @returns {Object} Gallery-compatible image object\r\n */\r\nconst createGalleryImage = (baseName, versions) => ({\r\n  thumb: getMediaUrl(versions.variants.medium.path),\r\n  full: getMediaUrl(versions.variants.large.path),\r\n  fullRes: versions.variants.custom \r\n    ? getMediaUrl(versions.variants.custom.path)\r\n    : getMediaUrl(versions.variants.large.path),\r\n  alt: `${baseName.replace(/-/g, ' ')} animation`,\r\n  title: baseName.replace(/-/g, ' '),\r\n  resolutions: Object.fromEntries(\r\n    Object.entries(versions.variants)\r\n      .map(([size, data]) => [size, data.resolution])\r\n  )\r\n});\r\n\r\n/**\r\n * Processes media files into gallery-compatible format\r\n * @param {Array} files - Array of media file objects\r\n * @returns {Array} Processed image objects for gallery display\r\n */\r\nconst processMediaFiles = (files) => {\r\n  // Handle directory previews\r\n  const directoryPreviews = files.filter(f => f.isDirectory);\r\n  if (directoryPreviews.length > 0) {\r\n    return directoryPreviews.map(dir => ({\r\n      thumb: dir.thumbnails[0]?.thumb, // Use first thumbnail as preview\r\n      thumbnails: dir.thumbnails,\r\n      alt: dir.alt,\r\n      isDirectory: true,\r\n      directoryId: dir.directoryId\r\n    }));\r\n  }\r\n\r\n  // Handle leaf directory files\r\n  const imageGroups = groupFilesByVariants(files);\r\n  \r\n  return Object.entries(imageGroups)\r\n    .filter(([_, versions]) => \r\n      versions.variants.medium && versions.variants.large // Ensure both 300px and 1000px exist\r\n    )\r\n    .map(([baseName, versions]) => createGalleryImage(baseName, versions));\r\n};\r\n\r\n/**\r\n * Dynamic Gallery Page Component\r\n * Displays a gallery of images based on the current URL path\r\n */\r\nconst DynamicGalleryPage = () => {\r\n  const { '*': pathParam = '' } = useParams();\r\n  // Remove 'root' and any leading/trailing slashes\r\n  const fullPath = pathParam\r\n    .replace(/^root\\/?/, '')  // Remove 'root/' prefix if present\r\n    .replace(/^\\/+|\\/+$/g, ''); // Remove leading/trailing slashes\r\n  const [images, setImages] = useState([]);\r\n \r\n  useEffect(() => {\r\n    const loadImages = async () => {\r\n      try {\r\n        const tree = await scanMediaDirectory();\r\n        const mediaFiles = extractMediaFiles(tree, fullPath);\r\n        const processedImages = processMediaFiles(mediaFiles);\r\n        setImages(processedImages);\r\n      } catch (error) {\r\n        console.error('Failed to load gallery images:', error);\r\n        setImages([]);\r\n      }\r\n    };\r\n   \r\n    loadImages();\r\n  }, [fullPath]);\r\n\r\n  return (\r\n    <WindowProvider>\r\n      <div className=\"flex flex-col items-center gap-4\">\r\n        <Gallery images={images} />\r\n      </div>\r\n    </WindowProvider>\r\n  );\r\n};\r\n\r\nexport default DynamicGalleryPage;\r\n"],"names":["DragProvider","_ref2","children","onDragEnd","scale","useZoom","_jsx","DndContext","modifiers","_ref3","transform","x","y","DRAG_STYLES","WindowContent","React","_ref","id","initialPosition","className","dragConstraints","windowData","registerWindow","updateWindowPosition","bringToFront","toggleWindowVisibility","useEffect","header","content","childArray","toArray","find","child","_child$props","props","filter","_child$props2","splitWindowChildren","setNodeRef","attributes","listeners","style","dragStyle","isDragging","isDraggingDnd","dndTransform","position","useDraggable","data","useScaledDrag","headerClassName","basePosition","ref","display","isVisible","zIndex","touchAction","onClick","_jsxs","e","stopPropagation","displayName","WindowWrapper","windows","useWindowContext","event","delta","newPosition","Gallery","images","activeWindows","setActiveWindows","useState","Set","navigate","useNavigate","map","img","idx","ImageThumbnail","src","thumb","alt","isDirectory","directoryId","thumbnails","handleOpenWindow","image","existingWindow","has","width","height","Math","max","random","window","innerWidth","innerHeight","onClose","prev","next","delete","Array","from","parseInt","split","pop","full","GalleryWindow","imageUrl","toggleVisibility","motion","div","whileHover","Folder","Layout","url","urlParts","decodeURIComponent","length","getImageName","RESOLUTIONS","findAllGifFiles","nodes","flatMap","node","type","PREVIEW_CONFIG","getRandomThumbnails","files","count","file","metadata","parseGifFilename","text","resolution","selected","result","thumbnail","floor","path","add","push","extractMediaFiles","targetPath","_node$children","some","hasSubdirectories","n","dir","subdir","allFiles","getMediaUrl","directoryName","startsWith","filename","endsWith","name","replace","lastDashIndex","lastIndexOf","substring","baseName","isNaN","processMediaFiles","directoryPreviews","f","_dir$thumbnails$","imageGroups","groups","forEach","variants","sizeCategory","groupFilesByVariants","Object","entries","_","versions","medium","large","createGalleryImage","fullRes","custom","title","resolutions","fromEntries","size","DynamicGalleryPage","pathParam","useParams","fullPath","setImages","async","tree","scanMediaDirectory","mediaFiles","processedImages","error","console","loadImages","WindowProvider"],"sourceRoot":""}